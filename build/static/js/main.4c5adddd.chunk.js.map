{"version":3,"sources":["context/AuthContext.js","context/SidebarContext.js","components/ThemedSuspense.js","components/AccessibleNavigationAnnouncer.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","createContext","SidebarContext","React","SidebarProvider","children","useState","isSidebarOpen","setIsSidebarOpen","toggleSidebar","closeSidebar","value","useMemo","Provider","ThemedSuspense","className","AccessibleNavigationAnnouncer","message","setMessage","location","useLocation","useEffect","pathname","slice","setTimeout","role","aria-live","aria-atomic","Layout","lazy","Login","CreateAccount","ForgotPassword","App","authenticated","user","tokenInfo","session","csrf","authInfo","setAuthInfo","path","component","exact","from","to","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","fallback","usePreferences","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4c5adddd.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nexport const AuthContext = createContext({});","import React, { useState, useMemo } from 'react'\r\n\r\n// create context\r\nexport const SidebarContext = React.createContext()\r\n\r\nexport const SidebarProvider = ({ children }) => {\r\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false)\r\n\r\n  function toggleSidebar() {\r\n    setIsSidebarOpen(!isSidebarOpen)\r\n  }\r\n\r\n  function closeSidebar() {\r\n    setIsSidebarOpen(false)\r\n  }\r\n  \r\n  const value = useMemo(() => ({\r\n      isSidebarOpen,\r\n      // eslint-disable-next-line\r\n      toggleSidebar,\r\n      closeSidebar,\r\n    }),\r\n    // eslint-disable-next-line\r\n    [isSidebarOpen]\r\n  );\r\n\r\n  return (\r\n    <SidebarContext.Provider value={value}>\r\n      {children}\r\n    </SidebarContext.Provider>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction ThemedSuspense() {\r\n  return (\r\n    <div className=\"w-full h-screen p-6 text-lg font-medium text-gray-600 dark:text-gray-400 dark:bg-gray-900\">\r\n      Loading...\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ThemedSuspense\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nfunction AccessibleNavigationAnnouncer() {\r\n  const [message, setMessage] = useState('')\r\n  const location = useLocation()\r\n\r\n  useEffect(() => {\r\n    // ignore the /\r\n    if (location.pathname.slice(1)) {\r\n      // make sure navigation has occurred and screen reader is ready\r\n      setTimeout(() => setMessage(`Navigated to ${location.pathname.slice(1)} page.`), 500)\r\n    } else {\r\n      setMessage('')\r\n    }\r\n  }, [location])\r\n\r\n  return (\r\n    <span className=\"sr-only\" role=\"status\" aria-live=\"polite\" aria-atomic=\"true\">\r\n      {message}\r\n    </span>\r\n  )\r\n}\r\n\r\nexport default AccessibleNavigationAnnouncer\r\n","import React, { lazy, useState } from 'react'\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\r\nimport AccessibleNavigationAnnouncer from './components/AccessibleNavigationAnnouncer'\r\nimport { AuthContext } from './context/AuthContext'\r\n\r\nconst Layout = lazy(() => import('./containers/Layout'))\r\nconst Login = lazy(() => import('./pages/Login'))\r\nconst CreateAccount = lazy(() => import('./pages/CreateAccount'))\r\nconst ForgotPassword = lazy(() => import('./pages/ForgotPassword'))\r\n\r\nfunction App() {\r\n  const [authInfo, setAuthInfo] = useState({\r\n    authenticated: false,\r\n    user: \"\",\r\n    tokenInfo: {},\r\n    session: {},\r\n    csrf: {}\r\n  });\r\n  return (\r\n    <AuthContext.Provider value={{ authInfo, setAuthInfo }}>\r\n      <Router>\r\n        <AccessibleNavigationAnnouncer />\r\n        <Switch>\r\n          <Route path=\"/login\" component={Login} />\r\n          <Route path=\"/create-account\" component={CreateAccount} />\r\n          <Route path=\"/forgot-password\" component={ForgotPassword} />\r\n\r\n          {/* Place new routes over this */}\r\n          <Route path=\"/app\" component={Layout} />\r\n          {/* If you have an index page, you can remothis Redirect */}\r\n          <Redirect exact from=\"/\" to=\"/login\" />\r\n        </Switch>\r\n      </Router>\r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Suspense } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './assets/css/tailwind.output.css'\r\nimport App from './App'\r\nimport { SidebarProvider } from './context/SidebarContext'\r\nimport ThemedSuspense from './components/ThemedSuspense'\r\nimport { Windmill } from '@windmill/react-ui'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\n// if (process.env.NODE_ENV !== 'production') {\r\n//   const axe = require('react-axe')\r\n//   axe(React, ReactDOM, 1000)\r\n// }\r\n\r\nReactDOM.render(\r\n  <SidebarProvider>\r\n    <Suspense fallback={<ThemedSuspense />}>\r\n      <Windmill usePreferences>\r\n        <App />\r\n      </Windmill>\r\n    </Suspense>\r\n  </SidebarProvider>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register()\r\n"],"sourceRoot":""}